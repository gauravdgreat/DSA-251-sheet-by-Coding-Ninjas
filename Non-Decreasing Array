Q: Problem statement
You have been given an integer array/list 'ARR' of size 'N'. Write a solution to check if it could become non-decreasing by modifying at most 1 element.

We define an array as non-decreasing, if ARR[i] <= ARR[i + 1] holds for every i (0-based) such that (0 <= i <= N - 2).

Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= T <= 50
1 <= N <= 10 ^ 4
- 10 ^ 9 <= ARR[i] <= 10 ^ 9

Where 'N' is the size of the given array/list.
And, ARR[i] denotes the i-th element in the array/list 'ARR'.

Time Limit: 1sec

Sol: public class Solution {
    public static boolean isPossible(int[] arr, int n) {
        int count = 0; // Count of modifications needed
        
        for (int i = 0; i < n - 1; i++) {
            if (arr[i] > arr[i + 1]) { // If current element is greater than the next
                if (count == 1) // More than 1 modification needed
                    return false;
                if (i > 0 && arr[i + 1] < arr[i - 1]) // Check if we can modify current element
                    arr[i + 1] = arr[i]; // Modify the next element
                else // Modify the current element
                    arr[i] = arr[i + 1];
                count++; // Increment modification count
            }
        }
        return true; // Array can become non-decreasing with at most 1 modification
    }
}
