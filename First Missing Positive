Q: Problem statement
You are given an array 'ARR' of integers of length N. Your task is to find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can have negative numbers as well.

For example, the input [3, 4, -1, 1] should give output 2 because it is the smallest positive number that is missing in the input array.

Sol: import java.util.*;

public class Solution {
    public static int firstMissing(int[] arr, int n) {
        // Iterate through the array
        for (int i = 0; i < n; i++) {
            // While the current element is within the valid range and not in its correct position
            while (arr[i] > 0 && arr[i] <= n && arr[arr[i] - 1] != arr[i]) {
                // Swap the current element with the element at its correct position
                int temp = arr[arr[i] - 1];
                arr[arr[i] - 1] = arr[i];
                arr[i] = temp;
            }
        }

        // Iterate through the array again to find the first missing positive integer
        for (int i = 0; i < n; i++) {
            if (arr[i] != i + 1) {
                return i + 1; // The first missing positive integer is found
            }
        }

        // If no missing positive integer is found, return n + 1
        return n + 1;
    }
}
